#include<iostream>
#include<cstdio>
#include<queue>
#include<vector>
#include<cstring>
using namespace std;

const int MAXN=1010;
const int INF=0x3f3f3f3f;
struct Edge{
    int v;
    int cost;
    Edge(int _v=0,int _cost=0):v(_v),cost(_cost){}
};
vector<Edge>E[MAXN];
void addedge(int u,int v,int w){
    E[u].push_back(Edge(v,w));
}
bool vis[MAXN];//在队列标志
int cnt[MAXN];//每个点的入队列次数
int dist[MAXN];
bool cir[MAXN];

void dfs(int u)
{
    cir[u]=true;
    for(int i=0;i<E[u].size();i++)
    {
        if(!cir[E[u][i].v])
        {
            dfs(E[u][i].v);
        }
    }
}

void SPFA(int start,int n){
    memset(vis,false,sizeof(vis));
    for(int i=1;i<=n;i++)dist[i]=INF;
        vis[start]=true;
        dist[start]=0;
    queue<int>que;
    while(!que.empty())que.pop();
        que.push(start);
        memset(cnt,0,sizeof(cnt));
        cnt[start]=1;
        while(!que.empty()){
            int u=que.front();
            que.pop();
            vis[u]=false;
            for(int i=0;i<E[u].size();i++){
                int v=E[u][i].v;
                if(cir[v]) continue;
                if(dist[v]>dist[u]+E[u][i].cost){
                dist[v]=dist[u]+E[u][i].cost;
                if(!vis[v]){
                vis[v]=true;
                que.push(v);
                if(++cnt[v]>n) dfs(v) ;
                //cnt[i] 为入队列次数，用来判定是否存在负环回路
                    }
                }
            }
        }
    return ;
}
int sum[MAXN];
int main(){
    int t;
    cin >> t ;
    int flag=0;
    while(t--){
            flag++;
            memset(cnt,0,sizeof(cnt));
            memset(cir,0,sizeof(cir));
        int n;
        cin >> n;
        for(int i=1;i<=n;i++){
            int a;
            cin >> a;
            sum[i]=a;
        }
         for(int i=1;i<=n;i++) E[i].clear();
        int m;
        cin >> m;
        for(int i=0;i<m;i++){
            int u,v;
            cin >> u >> v;
            int a=sum[v]-sum[u];
            addedge(u,v,a*a*a);

        }
        SPFA(1,n);
        int p;
        cin >> p ;
        printf("Case %d:\n",flag);
        while(p--){
            int a;
            cin >> a;
            if(dist[a]<3||dist[a]==INF||cir[a]){
                cout << "?" << endl;
                continue;
            }
            else cout << dist[a] << endl;
        }
    }

}
